# ===================================
# SCREEN VAULT APPLICATION CONFIG
# ===================================
spring.application.name=screen-vault
server.port=${SERVER_PORT:5555}

# Disable Thymeleaf template location check (REST API project)
spring.thymeleaf.check-template-location=false

# ===================================
# DATABASE CONFIGURATION
# ===================================
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/screen_vault?serverTimezone=UTC}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:123456}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hikari Connection Pool
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAX_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:5}
spring.datasource.hikari.idle-timeout=${DB_POOL_IDLE_TIMEOUT:30000}
spring.datasource.hikari.connection-timeout=${DB_POOL_CONNECTION_TIMEOUT:60000}

# ===================================
# MYBATIS PLUS CONFIGURATION  
# ===================================
mybatis-plus.configuration.log-impl=${MYBATIS_LOG_IMPL:org.apache.ibatis.logging.nop.NopImpl}
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.type-handlers-package=com.kihomura.screenvault.typehandler

# SQL Initialization for schema creation
spring.sql.init.mode=${SQL_INIT_MODE:always}
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.continue-on-error=true

# ===================================
# OAUTH2 CONFIGURATION
# ===================================
# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=email,profile

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Github OAuth2
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user

# ===================================
# APPLICATION SPECIFIC CONFIGURATION
# ===================================
app.domain=${APP_DOMAIN:localhost}
app.oauth2.redirect-uri=${APP_OAUTH2_REDIRECT_URI:http://localhost:5173/dashboard}
app.jwt.secret=${JWT_SECRET:screen-vault-local-development-secret-key-for-hs512-algorithm-minimum-64-bytes}
app.jwt.expiration=${JWT_EXPIRATION:86400000}

# ===================================
# CORS CONFIGURATION
# ===================================
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:5173}
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:5173}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# ===================================
# LOGGING CONFIGURATION
# ===================================
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.com.kihomura.screenvault=${LOG_LEVEL_APP:INFO}
logging.file.name=${LOG_FILE_PATH:logs/application.log}